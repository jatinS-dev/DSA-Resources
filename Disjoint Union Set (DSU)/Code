// DSU Code for i) make(), ii) find(), iii) Union();

#include<bits/stdc++.h>
using namespace std;
const int N = 1e5 + 10;

int parent[N];
int size[N]; // To Store the Size of Groups

void make(int v) {
	parent[v] = v;
	size[v] = 1;  // Because When we add initially, the size is always 1;
}

int find(int v) {
	if (v == parent[v])	return v;
	return parent[v] = find(parent[v]);  // Compression Operation
}

void Union(int a, int b) {
	a = find(a);
	b = find(b);
	if (a != b) {
		// Union By Size
		if (size[a] < size[b]) {
			swap(a, b);
		}
		parent[b] = a;
		size[a] += size[b];	  // We are Joining B to A;
	}
}

// TC - Amortized Time Complexity - O(alpha(N));

int main() {
	// n - nodes, k - edges;
	int n, k;
	cin >> n >> k;

	// Finding Distinct Connected Component;
	for (int i = 1; i <= n; ++i) {
		make(i);
	}
	while (k--) {
		int u, v;
		cin >> u >> v;
		Union(u, v);
	}
	int connected_cnt = 0;
	for (int i = 1; i <= n; ++i) {
		if (find[v] == v) {
			connected_cnt++;
		}
	}
	return 0;
}
