----------Memoized version of LCS------------

#include<bits/stdc++.h>
using namespace std;
#define ll long long

int dp[1001][1001];
int LCS(string &s1, string &s2, int m, int n){
    // Base Case
    if(m == 0 || n == 0){
        return 0;
    }
    if(dp[m][n]) != -1 }{
        return dp[m][n];
    }
    if(s1[m-1] == s2[n-1]){
        return dp[m][n] =  1 + LCS(s1, s2, m-1,n-1);
    }else{
        return dp[m][n] = max(LCS(s1, s2, m, n-1), LCS(s1,s2,m-1, n));
    }
}

int main(){
    string s1, s2;
    cin >> s1 >> s2;
    int m = s1.size();
    int n = s2.size();
    memset(dp,-1, sizeof(dp));

    cout<<LCS(s1,s2,m,n);

    return 0;
}

-----------Top- Down Version of LCS--------------------

#include<bits/stdc++.h>
using namespace std;
#define ll long long

int dp[1001][1001];
int LCS(string &s1, string &s2, int m, int n){
    // Base Case
    for(int i = 0; i <= m; i++){
        for(int j = 0; j <= n; j++){
            if(i == 0 || j == 0){
                dp[i][j] = 0;
            }else if(s1[i-1] == s2[j-1]){
                dp[i][j] = 1 + dp[i-1][j-1];
            }else{
                dp[i][j] = max(dp[i][j-1], dp[i-1][j]);
            }
        }
    }
    return dp[m][n];
}

int main(){
    string s1, s2;
    cin >> s1 >> s2;
    int m = s1.size();
    int n = s2.size();
    memset(dp,-1, sizeof(dp));

    cout<<LCS(s1,s2,m,n);

    return 0;
}
