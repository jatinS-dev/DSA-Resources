#include<iostream>
#include<list>
#include<map>
#include<queue>
using namespace std;
template<typename T>

// Creating Array of List

class Graph {
    map<T, list<T>> l;
public:
  
    void addEdge(int x, int y){
        l[x].push_back(y);
        l[y].push_back(x);
    }
    void dfs_helper(T src, map<T, bool> &visited){
        //  dfs_helper is the recursive function that will traverse the graph
        cout<<src<<" ";
        visited[src] = true;
        // After printing source, Now go to all neighbour of the src that is not visited one by one
        for(T nbr : l[src]){
            if(!visited[nbr]){
                dfs_helper(nbr, visited);
            }
        }
     }
    // Recursive Prosses
    void dfs(T src){
        map<T, bool> visited;
        // Mark all the node false in the beginning
        for (auto p:l){
            T node = p.first;
            visited[node] = false;
        }
        // We should also call the helper function
        dfs_helper(src, visited);

    }
};

int main(){
    Graph<int> g;
    
    g.addEdge(0, 1);
    g.addEdge(1, 2);
    g.addEdge(2, 3);
    g.addEdge(1, 2);
    g.addEdge(2, 2);
    g.addEdge(3, 4);
    g.addEdge(3, 5);
    g.addEdge(4, 6);
    g.addEdge(6, 7);

    
    g.dfs(0);

    return 0;
}
