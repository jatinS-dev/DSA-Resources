// Adj. Matrix non-weighted

#include<bits/stdc++.h>
using namespace std;
const int N = 1e3 + 10;
int graph[N][N];
std::vector<int> adj[N];
int main() {
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < m; ++i) {
        int v1, v2;
        cin >> v1 >> v2;
        graph[v1][v2] = 1;
        graph[v2][v1] = 1;
        adj[v1].push_back(v2);
        adj[v2].push_back(v1);
    }
    return 0;
}

// Adj. Matrix weighted

#include<bits/stdc++.h>
using namespace std;
const int N = 1e3 + 10;
int graph[N][N];
std::vector<pair<int, int>> adj[N];
int main() {
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < m; ++i) {
        int v1, v2, wt;
        cin >> v1 >> v2;
        graph[v1][v2] = wt;
        graph[v2][v1] = wt;
        adj[v1].push_back({v2, wt});
        adj[v2].push_back({v1, wt});
    }
    return 0;
}
